[{"title":"DNS 필터링 규칙 구문","type":0,"sectionRef":"#","url":"general/dns-filtering-syntax/","content":"","keywords":""},{"title":"소개​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#소개","content":"여러분은 AdGuard DNS 필터링 구문을 이용해 필터를 보다 유연하게 적용하여 여러분이 원하는 컨텐츠를 막도록 설정할 수 있습니다. AdGuard DNS 필터링 규칙 구문은 AdGuard Home, AdGuard DNS, Windows/Mac/Android용 AdGuard와 같은 다양한 AdGuard 제품에서 사용할 수 있습니다. 호스트 차단 목록을 작성하는 방법은 다음의 세가지가 있습니다. Adblock-스타일 구문: 보편적인 Adblock 스타일 필터링 규칙의 문법을 사용하여 작성하는 현대적인 접근법. 이 방식으로 작성된 규칙들은 브라우저 광고 차단 확장 프로그램들과 호환이 가능합니다. /etc/hosts 구문: 운영체제가 호스트 파일에 사용하는 것과 동일한 문법을 사용하는 검증된 작성법입니다. 도메인 전용 구문: 도메인 이름만을 이용하는 간단한 목록입니다. 차단 목록을 만드는 경우 Adblock 스타일 구문을 사용하는 것이 좋습니다. 이전 스타일의 구문에 비해 몇 가지 중요한 이점이 있습니다. Blocklists size. Using pattern matching allows you to have a single rule instead of hundreds of /etc/hosts entries. Compatibility. Your blocklist will be compatible with browser ad blockers, and it will be easier to share rules with a browser filter list. Extensibility. For the last decade the Adblock-style syntax has greatly evolved, and we don't see why we can't extend it even more and provide additional features for network-wide blockers. If you're maintaining an /etc/hosts-style blocklist or if you maintain multiple filter lists regardless of their type, we provide a tool that can be used to compile blocklists. We called it Hostlist compiler and we use it ourselves to create AdGuard DNS filter. "},{"title":"기본 예제​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#기본-예제","content":"||example.org^: block access to the example.org domain and all its subdomains, like www.example.org. @@||example.org^: unblock access to the example.org domain and all its subdomains. 1.2.3.4 example.org: (attention, old /etc/hosts-style syntax) in AdGuard Home, respond with 1.2.3.4 to queries for the example.org domain but not its subdomains. In Private AdGuard DNS, block access to example.org. www.example.org remains allowed. In AdGuard Home, using the unspecified IP address (0.0.0.0) or a local address (127.0.0.1 and alike) for a host is basically the same as blocking that host. # Returns the IP address 1.2.3.4 for example.org. 1.2.3.4 example.org # Blocks example.com by responding with 0.0.0.0. 0.0.0.0 example.com example.org: a simple domain rule. Blocks example.org domain but not its subdomains. www.example.org remains allowed. ! Here goes a comment and # Also a comment: comments. /REGEX/: block access to the domains matching the specified regular expression. "},{"title":"Adblock 스타일 구문​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#adblock-스타일-구문","content":"This is a subset of the traditional Adblock-style syntax which is used by browser ad blockers.  rule = [&quot;@@&quot;] pattern [ &quot;$&quot; modifiers ] modifiers = [modifier0, modifier1[, ...[, modifierN]]]  pattern: the hostname mask. Every hostname is matched against this mask. The pattern can also contain special characters, which are described below. @@: the marker that is used in the exception rules. Start your rule with this marker if you want to turn off filtering for the matching hostnames. modifiers: parameters that clarify the rule. They may limit the scope of the rule or even completely change the way it works. "},{"title":"특수 문자​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#특수-문자","content":"*: the wildcard character. It is used to represent any set of characters. This can also be an empty string or a string of any length. ||: matches the beginning of a hostname, including any subdomain. For instance, ||example.org matches example.org and test.example.org but not testexample.org. ^: the separator character. Unlike browser ad blocking, there's nothing to separate in a hostname, so the only purpose of this character is to mark the end of the hostname. |: a pointer to the beginning or the end of the hostname. The value depends on the character placement in the mask. For example, the rule ample.org| corresponds to example.org but not to example.org.com. |example corresponds to example.org but not to test.example. "},{"title":"Regular Expressions​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#regular-expressions","content":"If you want even more flexibility in making rules, you can use regular expressions instead of the default simplified matching syntax. If you want to use a regular expression, the pattern has to look like this: pattern = &quot;/&quot; regexp &quot;/&quot;  Examples: /example.*/ will block hosts matching the example.* regexp. @@/example.*/$important will unblock hosts matching the example.* regexp. Note that this rule also implies the important modifier. "},{"title":"Comments​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#comments","content":"Any line that starts with an exclamation mark or a hash sign is a comment and it will be ignored by the filtering engine. Comments are usually placed above rules and used to describe what a rule does. Example: ! This is a comment. # This is also a comment.  "},{"title":"Rule Modifiers​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#rule-modifiers","content":"You can change the behavior of a rule by adding modifiers. Modifiers must be located at the end of the rule after the $ character and be separated by commas. Examples:  ||example.org^ is the matching pattern. $ is the delimiter, which signals that the rest of the rule are modifiers. important is the modifier. You may want to use multiple modifiers in a rule. Separate them by commas in this case: ||example.org^$client=127.0.0.1,dnstype=A ||example.org^ is the matching pattern. $ is the delimiter, which signals that the rest of the rule are modifiers. client=127.0.0.1 is the client modifier with its value, 127.0.0.1, is the delimiter. And finally, dnstype=A is the dnstype modifier with its value, A. NOTE: If a rule contains a modifier not listed in this document, the whole rule must be ignored. This way we avoid false-positives when people are trying to use unmodified browser ad blockers' filter lists like EasyList or EasyPrivacy. client​ The client modifier allows specifying clients this rule is applied to. There are two main ways to identify a client: By their IP address or CIDR prefix. This way works for all kinds of clients. By their name. This way only works for persistent clients (in AdGuard Home) and devices (in Private AdGuard DNS), which you have manually added. NOTE: In AdGuard Home, ClientIDs are not currently supported, only names are. If you have added a client with the name “My Client” and ClientID my-client spell your modifier as $client='My Client' as opposed to $client=my-client. The syntax is: $client=value1|value2|...  You can also exclude clients by adding a ~ character before the value. In this case, the rule is not be applied to this client's DNS requests. $client=~value1  Client names usually contain spaces or other special characters, which is why you should enclose the name in quotes. Both single and double ASCII quotes are supported. Use the backslash (\\) to escape quotes (&quot; and '), commas (,), and pipes (|). NOTE: When excluding a client, you must keep ~ out of the quotes. Examples: @@||*^$client=127.0.0.1: unblock everything for localhost. ||example.org^$client='Frank\\'s laptop': block example.org for the client named Frank's laptop only. Note that quote (') in the name must be escaped. ||example.org^$client=~'Mary\\'s\\, John\\'s\\, and Boris\\'s laptops': block example.org for everyone except for the client named Mary's, John's, and Boris's laptops. Note that comma (,) must be escaped as well. ||example.org^$client=~Mom|~Dad|Kids: block example.org for Kids, but not for Mom and Dad. This example demonstrates how to specify multiple clients in one rule. ||example.org^$client=192.168.0.0/24: block example.org for all clients with IP addresses in the range from 192.168.0.0 to 192.168.0.255. denyallow​ You can use the denyallow modifier to exclude domains from the blocking rule. To add multiple domains to one rule, use the | character as a separator. The syntax is: $denyallow=domain1|domain2|...  This modifier allows avoiding creating unnecessary exception rules when our blocking rule covers too many domains. You may want to block everything save for a couple of TLD domains. You could use the standard approach, i.e. rules like this: ! Block everything. /.*/ ! Unblock a couple of TLDs. @@||com^ @@||net^  The problem with this approach is that this way you will also unblock tracking domains that are located on those TLDs (i.e. google-analytics.com). Here's how to solve this with denyallow: *$denyallow=com|net  Examples: *$denyallow=com|net: block everything save for *.com and *.net. @@*$denyallow=com|net: unblock everything save for *.com and *.net. ||example.org^$denyallow=sub.example.org. block example.org and *.example.org but don't block sub.example.org. dnstype​ The dnstype modifier allows specifying DNS request or response type on which this rule will be triggered. The syntax is: $dnstype=value1|value2|... $dnstype=~value1|~value2|~...  The names of the types are case-insensitive, but are validated against a set of actual DNS resource record (RR) types. Do not combine exclusion rules with inclusion ones. This: $dnstype=~value1|value2  is equivalent to this: $dnstype=value2  Examples: ||example.org^$dnstype=AAAA: block DNS queries for the IPv6 addresses of example.org. ||example.org^$dnstype=~A|~CNAME: only allow A and CNAME DNS queries for example.org, block out the rest. NOTE: Before version v0.108.0, AdGuard Home would use the type of the request to filter the response records, as opposed to the type of the response record itself. That caused issues, since that meant that you could not write rules that would allow certain CNAME records in responses in A and AAAA requests. In v0.108.0 that behaviour was changed, so now this: ||canon.example.com^$dnstype=~CNAME  allows you to avoid filtering of the following response: ANSWERS: -&gt; example.com canonical name = canon.example.com. ttl = 60 -&gt; canon.example.com internet address = 1.2.3.4 ttl = 60  dnsrewrite​ The dnsrewrite response modifier allows replacing the content of the response to the DNS request for the matching hosts. Note that this modifier in AdGuard Home works in all rules, but in Private AdGuard DNS — only in custom ones. Rules with the dnsrewrite response modifier have higher priority than other rules in AdGuard Home. The shorthand syntax is: $dnsrewrite=1.2.3.4 $dnsrewrite=abcd::1234 $dnsrewrite=example.net $dnsrewrite=REFUSED  The keywords MUST be in all caps (e.g. NOERROR). Keyword rewrites take precedence over the other and will result in an empty response with an appropriate response code. The full syntax is of the form RCODE;RRTYPE;VALUE: $dnsrewrite=NOERROR;A;1.2.3.4 $dnsrewrite=NOERROR;AAAA;abcd::1234 $dnsrewrite=NOERROR;CNAME;example.net $dnsrewrite=REFUSED;;  The $dnsrewrite modifier with the NOERROR response code may also has empty RRTYPE and VALUE fields. The CNAME one is special because AdGuard Home will resolve the host and add its info to the response. That is, if example.net has IP 1.2.3.4, and the user has this in their filter rules: ||example.com^$dnsrewrite=example.net ! Or: ||example.com^$dnsrewrite=NOERROR;CNAME;example.net  then the response will be something like: $ nslookup example.com my.adguard.local  Server: my.adguard.local Address: 127.0.0.1#53 Non-authoritative answer: example.com canonical name = example.net. Name: example.net Address: 1.2.3.4  Next, the CNAME rewrite. After that, all other records' values are summed as one response, so this: ||example.com^$dnsrewrite=NOERROR;A;1.2.3.4 ||example.com^$dnsrewrite=NOERROR;A;1.2.3.5  will result in a response with two A records. Currently supported RR types with examples: ||4.3.2.1.in-addr.arpa^$dnsrewrite=NOERROR;PTR;example.net. adds a PTRrecord for reverse DNS. Reverse DNS requests for 1.2.3.4 to the DNS server will result in example.net. NOTE: the IP MUST be in reverse order. See RFC 1035. ||example.com^$dnsrewrite=NOERROR;A;1.2.3.4 adds an A record with the value 1.2.3.4. ||example.com^$dnsrewrite=NOERROR;AAAA;abcd::1234 adds an AAAA record with the value abcd::1234. ||example.com^$dnsrewrite=NOERROR;CNAME;example.org adds a CNAME record. See explanation above. ||example.com^$dnsrewrite=NOERROR;HTTPS;32 example.com alpn=h3 adds an HTTPS record. Only a subset of parameter values is supported: values must be contiguous and, where a value-list is expected, only one value is currently supported: ipv4hint=127.0.0.1 // Supported. ipv4hint=&quot;127.0.0.1&quot; // Unsupported. ipv4hint=127.0.0.1,127.0.0.2 // Unsupported. ipv4hint=&quot;127.0.0.1,127.0.0.2&quot; // Unsupported. This will be changed in the future. ||example.com^$dnsrewrite=NOERROR;MX;32 example.mail adds an MX record with precedence value 32 and exchange value example.mail. ||example.com^$dnsrewrite=NOERROR;SVCB;32 example.com alpn=h3 adds a SVCB value. See the HTTPS example above. ||example.com^$dnsrewrite=NOERROR;TXT;hello_world adds a TXT record with the value hello_world. ||_svctype._tcp.example.com^$dnsrewrite=NOERROR;SRV;10 60 8080 example.com adds an SRV record with priority value 10, weight value 60, port8080, and target value example.com. ||example.com^$dnsrewrite=NXDOMAIN;; responds with an NXDOMAIN code. $dnstype=AAAA,denyallow=example.org,dnsrewrite=NOERROR;; responds with an empty NOERROR answers for all AAAA requests except the ones for example.org. Exception rules remove one or all rules: @@||example.com^$dnsrewrite removes all DNS rewrite rules. @@||example.com^$dnsrewrite=1.2.3.4 removes the DNS rewrite rule that adds an A record with the value 1.2.3.4. important​ The important modifier applied to a rule increases its priority over any other rule without the modifier. Even over basic exception rules. Examples: In this example: ||example.org^$important @@||example.org^ ||example.org^$important will block all requests to *.example.org despite the exception rule. In this example: ||example.org^$important @@||example.org^$important the exception rule also has the important modifier, so it will work. badfilter​ The rules with the badfilter modifier disable other basic rules to which they refer. It means that the text of the disabled rule should match the text of the badfilter rule (without the badfilter modifier). Examples: ||example.com$badfilter disables ||example.com. @@||example.org^$badfilter disables @@||example.org^. NOTE: The badfilter modifier currently doesn't work with /etc/hosts-style rules. 127.0.0.1 example.org$badfilter will not disable the original 127.0.0.1 example.org rule. ctag​ The ctag modifier can only be used in AdGuard Home. It allows to block domains only for specific types of DNS client tags. You can assign tags to clients in the AdGuard Home UI. In the future, we plan to assign tags automatically by analyzing the behavior of each client. The syntax is: $ctag=value1|value2|...  If one of client's tags matches the ctag values, this rule applies to the client. The syntax for exclusion is: $ctag=~value1|~value2|...  If one of client's tags matches the exclusion ctag values, this rule doesn't apply to the client. Examples: ||example.org^$ctag=device_pc|device_phone: block example.org for clients tagged as device_pc or device_phone. ||example.org^$ctag=~device_phone: block example.org for all clients except those tagged as device_phone. The list of allowed tags: By device type: device_audio: audio devices.device_camera: cameras.device_gameconsole: game consoles.device_laptop: laptops,device_nas: NAS (Network-attached Storages).device_pc: PCs.device_phone: phones.device_printer: printers.device_securityalarm: security alarms.device_tablet: tablets.device_tv: TVs.device_other: other devices. By operating system: os_android: Android.os_ios: iOS.os_linux: Linux.os_macos: macOS.os_windows: Windows.os_other: other OSes. By user group: user_admin: administrators.user_regular: regular users.user_child: children. "},{"title":"/etc/hosts-Style Syntax​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#etc-hosts-syntax","content":"For each host a single line should be present with the following information: IP_address canonical_hostname [aliases...]  Fields of the entries are separated by any number of space or tab characters. Text from the # character until the end of the line is a comment and is ignored. Hostnames may contain only alphanumeric characters, hyphen-minus signs (-), and periods (.). They must begin with an alphabetic character and end with an alphanumeric character. Optional aliases provide for name changes, alternate spellings, shorter hostnames, or generic hostnames (for example, localhost). Example: # This is a comment 127.0.0.1 example.org example.info 127.0.0.1 example.com 127.0.0.1 example.net # this is also a comment  In AdGuard Home, the IP addresses are used to respond to DNS queries for these domains. In Private AdGuard DNS, these addresses are simply blocked. "},{"title":"Domains-Only Syntax​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#domains-only-syntax","content":"A simple list of domain names, one name per line. Example: # This is a comment example.com example.org example.net # this is also a comment  If a string is not a valid domain (e.g. *.example.org), AdGuard Home will consider it to be an Adblock-style rule. "},{"title":"Hostlists Compiler​","type":1,"pageTitle":"DNS 필터링 규칙 구문","url":"general/dns-filtering-syntax/#hostlists-compiler","content":"If you are maintaining a blocklist and use different sources in it, Hostlists compiler may be useful to you. It is a simple tool that makes it easier to compile a hosts blocklist compatible with AdGuard Home, Private AdGuard DNS or any other AdGuard product with DNS filtering. What it's capable of: Compile a single blocklist from multiple sources. Exclude the rules you don't need. Cleanup the resulting list: deduplicate, remove invalid rules, and compress the list. "},{"title":"DNS filtering","type":0,"sectionRef":"#","url":"general/dns-filtering/","content":"","keywords":""},{"title":"What is DNS?​","type":1,"pageTitle":"DNS filtering","url":"general/dns-filtering/#what-is-dns","content":"DNS stands for &quot;Domain name system&quot;, and its purpose is to translate websites' names into something browsers can understand, i.e. IP addresses. Thus, each time you go to a website, your browser sends a request to a special server (DNS server). That server looks at the requested domain name and replies with a corresponding IP address. Very schematically it can be represented like this:  The same applies, of course, to all apps and programs that send any web requests, not just browsers. "},{"title":"How does DNS filtering work?​","type":1,"pageTitle":"DNS filtering","url":"general/dns-filtering/#how-does-dns-filtering-work","content":"When you use one of the AdGuard apps that supports DNS filtering, it acts as a buffer between your device and the DNS server. All DNS requests that your browsers or apps are about to send first get processed by AdGuard. If you're using the default DNS server provided by your ISP, your DNS traffic is likely not encrypted and vulnerable to snooping and hijacking. AdGuard will encrypt all your DNS requests before they leave your device, so that no malefactor could get access to their contents. On top of that, AdGuard can identify requests to ad, tracking, and/or adult domains and redirect them to a &quot;blackhole&quot; instead of forwarding them to the DNS server. More on that later.  DNS filtering is a powerful tool and it's supported by all major AdGuard apps: AdGuard for Windows, AdGuard for Mac, AdGuard for Android and AdGuard for iOS. DNS filtering can be broken down into two separate functions: to encrypt and reroute DNS traffic to DNS servers, and to block some domains locally by applying DNS blocklists. "},{"title":"DNS servers​","type":1,"pageTitle":"DNS filtering","url":"general/dns-filtering/#dns-servers","content":"There are thousands of DNS servers to choose from, and they are all unique in their properties and purposes. Most simply return the IP address of the requested domain, but some have additional functions: they block ad, tracking, adult domains and so on. Nowadays all major DNS servers employ one or more reliable encryption protocols: DNS-over-HTTPS, DNS-over-TLS. AdGuard also provides a DNS service, and it was the world's first to offer the very new and promising DNS-over-QUIC encryption protocol. AdGuard has different servers for different goals. This diagram illustrates how AdGuard blocking servers work:  Other DNS providers may work differently, so learn more about them before committing to this or that DNS server. You can find the list of some of the most popular DNS providers in this article. All AdGuard apps that support DNS functionality also have a list of DNS servers to choose from, or even allow to select any custom DNS server that you'd like. "},{"title":"Local DNS blocklists​","type":1,"pageTitle":"DNS filtering","url":"general/dns-filtering/#local-dns-blocklists","content":"But by relying on DNS servers only to filter your DNS traffic you lose all flexibility. If the selected server blocks a domain, you can't access it. With AdGuard, you don't even need to configure any specific DNS server to filter DNS traffic. All AdGuard products let you employ DNS blocklists, be it simple hosts files or lists that use more advanced syntax. They work similarly to regular blocklists: when a DNS request matches one of the rules in the active filter list, it gets blocked. To be more precise, it gets rerouted to a &quot;blackhole&quot;. In AdGuard for iOS, first you have to enable &quot;Advanced mode&quot; in settings in order to get access to DNS blocking. You can add as many custom blocklists as you wish. For instance, you can use AdGuard DNS filter. It quite literally blocks everything that AdGuard DNS server does, but in this case you are free to use any other DNS server. Plus, this way you can add more filters or create custom exception rules, all of which would be impossible with a simple &quot;use a blocking DNS server&quot; setup. There are hundreds of different DNS blocklists, you can look for them here. "},{"title":"Comparing DNS filtering to network filtering​","type":1,"pageTitle":"DNS filtering","url":"general/dns-filtering/#comparing-dns-filtering-to-network-filtering","content":"Network filtering is what we call the 'regular' way AdGuard standalone apps process network traffic, hence the name. Feel free to brush up on it by reading this article. First of all, we have to mention that with AdGuard you don't have to choose. You can always use both regular network filtering and DNS filtering at the same time. However, it's important to understand key differences between the two. DNS filtering has both its unique advantages and drawbacks: Pros of DNS filtering: On some platforms this is the only way to achieve system-wide filtering. For example, on iOS only the Safari browser supports content blocking in the familiar sense, for everything else there's only DNS filtering.Some forms of tracking (like CNAME-cloaked tracking) can only be dealt with by DNS filtering.The stage of processing a DNS request is the earliest you could possibly deal with an ad or a tracker, this helps save a little bit of battery life and traffic. Cons of DNS filtering: DNS filtering is &quot;rough&quot;, meaning that it won't remove whitespaces that are left behind a blocked ad, or apply any sorts of cosmetic filtering. Many of the more complicated ads can't be blocked on DNS level (or rather, they can, but only by blocking the entire domains which are being used for other purposes).  An example of difference between DNS filtering and network filtering It's not possible to know the origin of a DNS request, which means you can't distinguish between different apps on the DNS level. This harms the statistics and makes it impossible to create app-specific filtering rules. We recommend to use DNS filtering in addition to network filtering, not instead of it, whenever possible. "},{"title":"크레딧 및 감사","type":0,"sectionRef":"#","url":"miscellaneous/acknowledgements/","content":"","keywords":""},{"title":"AdGuard DNS​","type":1,"pageTitle":"크레딧 및 감사","url":"miscellaneous/acknowledgements/#adguard-dns","content":"Miek Gieben의 DNS 모듈: https://github.com/miekg/dnsJun Kimura의 GCache 모듈: https://github.com/bluele/gcachePatrick Mylund Nielsen의 Go-Cache 모듈: https://github.com/patrickmn/go-cacheDaniel Martí의 Gofumpt 프로그램: mvdan.cc/gofumptLucas Clemente의 QUIC-Go 모듈: https://github.com/lucas-clemente/quic-goDominik Honnef의 Staticcheck 프로그램: https://staticcheck.io "},{"title":"AdGuard API 및 웹사이트​","type":1,"pageTitle":"크레딧 및 감사","url":"miscellaneous/acknowledgements/#adguard-api-및-웹사이트","content":"Symfony: http://symfony.com/React: https://reactjs.org/Vue: https://vuejs.org/PostgreSQL: https://www.postgresql.org/Spring https://spring.io/ClickHouse: https://clickhouse.com/Logstash: https://github.com/elastic/logstash "},{"title":"비공개 AdGuard DNS 베타 테스트","type":0,"sectionRef":"#","url":"miscellaneous/beta-testing/","content":"","keywords":""},{"title":"베타 테스터가 되는 방법​","type":1,"pageTitle":"비공개 AdGuard DNS 베타 테스트","url":"miscellaneous/beta-testing/#베타-테스터가-되는-방법","content":"Private AdGuard DNS 의 베타 테스터가 되려면 AdGuard DNS 웹사이트로 이동하여 오른쪽 상단의 '베타 참여' 버튼을 클릭하고 소셜 미디어 또는 기존 AdGuard 계정을 통해 로그인합니다. 이제 Pivate AdGuard DNS를 설정하고 서비스를 사용하며 작동 방식에 대한 보고서를 보낼 수 있습니다. "},{"title":"버그를 신고하는 방법​","type":1,"pageTitle":"비공개 AdGuard DNS 베타 테스트","url":"miscellaneous/beta-testing/#버그를-신고하는-방법","content":"당신이 버그를 발견했다고 생각해 봅니다. 혹시 개발자와 제안을 공유하고 싶으신가요? 어쨌든, 우리에게 제보할 수 있는 몇 가지 방법이 있습니다: forum.adguard.com 으로 이동하여 포럼의 '베타 테스트' 카테고리 에 새 스레드를 게시하거나 기존 스레드를 찾습니다. 먼저 포럼 규칙 을 읽으십시오. AdGuard DNS 저장소로 이동하여 새 문제를 등록하고 버그/기능 요청을 자세히 설명합니다. 위의 방법이 가장 선호되지만 필요한 경우 다른 방법을 사용할 수 있습니다. Facebook, Reddit등과 같은 다양한 소셜 미디어 플랫폼에서 저희를 찾아주세요. 그러나 이것은 기술적인 문제를 논의하기 위해서 가장 효과적인 방법은 아닙니다. 앱의 지원 탭에서 지원팀에 이메일을 보내거나 support@adguard.com로 직접 이메일을 보내주세요. "},{"title":"스크린샷을 찍는 방법","type":0,"sectionRef":"#","url":"miscellaneous/take-screenshot/","content":"","keywords":""},{"title":"스크린샷을 찍는 방법​","type":1,"pageTitle":"스크린샷을 찍는 방법","url":"miscellaneous/take-screenshot/#스크린샷을-찍는-방법","content":"여기에서 컴퓨터나 모바일 장치에서 스크린샷을 찍는 데 필요한 모든 단축키를 찾을 수 있습니다. "},{"title":"Android​","type":1,"pageTitle":"스크린샷을 찍는 방법","url":"miscellaneous/take-screenshot/#android","content":"Android 기기에서 스크린샷을 찍는 것은 기기 모델 및 제조업체에 따라 다양한 방법으로 수행할 수 있습니다. 일반적으로 Android의 경우 다음 버튼 조합을 사용해야 합니다. 볼륨 작게 및 전원 버튼을 동시에 1-2초 동안 누르십시오. Android 기기는 전체 화면을 캡처하여 사진으로 저장합니다. 따라서 갤러리의 스크린샷 폴더에서 스크린샷을 찾을 수 있습니다. 단, 이미 말씀드린 것처럼 특정 기기에 따라 차이가 있을 수 있습니다. 다른 방법을 살펴보겠습니다. 볼륨 작게 및 전원 버튼을 동시에 1-2초 동안 누르십시오.뒤로가기 및 홈 버튼을 동시에 누르십시오. Android 8 이상에서는 휴대전화의 왼쪽 또는 오른쪽 가장자리를 따라 수직으로 손을 놓고 화면을 터치한 손으로 해당 가장자리에서 안쪽으로 스와이프하여 스크린샷을 찍을 수도 있습니다. 이 방법이 작동하지 않으면 설정 &gt; 고급 기능을 확인하여 손바닥으로 스와이프하여 캡처을 활성화합니다. 게다가, 예를 들어 Screenshot Easy, Screenshot Ultimate, Screenshot Snap 등과 같이 장치에서 스크린샷을 찍기 위해 항상 특별한 응용 프로그램을 사용할 수 있습니다. "},{"title":"iOS​","type":1,"pageTitle":"스크린샷을 찍는 방법","url":"miscellaneous/take-screenshot/#ios","content":"모든 iOS 기기(오래된 기기 제외)에서 표준 도구를 사용하여 스크린샷을 찍을 수 있습니다. iOS 기기에서 스크린샷을 찍으려면 다음 조합을 사용하세요. 전원 (측면) 버튼과 홈 버튼을 동시에 눌렀다가 빠르게 놓습니다. 그리고 이것은 iPhone X 이상을 위한 것입니다: 전원 버튼과 볼륨 높이기 버튼을 동시에 눌렀다가 빠르게 놓습니다. iOS 기기는 전체 화면을 캡처하여 사진으로 저장합니다. 기본 사진 앱에서 찾을 수 있습니다. "},{"title":"Windows​","type":1,"pageTitle":"스크린샷을 찍는 방법","url":"miscellaneous/take-screenshot/#windows","content":"Windows에서 스크린샷을 찍으려면 PrtScn 버튼 누르십시오. 일부 노트북에서는 Fn 을 누른 다음 PrtScn를 눌러야 합니다. 참고: PrtScn (인쇄 화면) 버튼은 PrntScrn, PrtScn, PrtScr 또는 PrtSc와 같은 다양한 키보드에서 다르게 나타날 수도 있습니다. Windows는 전체 화면을 캡처하여 (보이지 않는) 클립보드에 복사합니다. 활성 창의 스크린샷을 찍으려면 다음 조합을 사용하십시오. Alt 을 누른 상태에서 PrtScn (또는 일부 노트북에서는 Fn + Alt + PrtScn)을 누릅니다. 특정 영역의 스크린샷을 찍으려면 다음 조합을 사용해야 합니다. *Win (Windows 버튼) 및 Shift를 누른 상태에서 *S를 누릅니다. 스크린샷을 찍으면 클립보드에 저장됩니다. 대부분의 경우 Ctrl + V 버튼 조합을 사용하여 현재 편집 중인 문서에 붙여 넣을 수 있습니다. 또는 스크린샷을 파일로 저장해야 하는 경우 기본 그림판 프로그램(또는 이미지로 작업할 수 있는 다른 앱)을 열어야 합니다. 동일한 버튼 조합을 사용하거나 붙여넣기 버튼(일반적으로 화면의 왼쪽 상단 모서리에 있음)을 클릭하여 스크린샷을 붙여 넣은 다음 저장합니다. Windows 8 및 10 에서는 Win + PrtScn 조합으로 매우 빠르게 스크린샷을 찍을 수 있습니다. 이 버튼을 누르자마자 스크린샷은 자동으로 사진 -&gt; 스크린샷 폴더에 파일로 저장됩니다. 컴퓨터의 표준 프로그램 중 시작 메뉴를 통해 찾을 수 있는 Snipping Tool 이라는 스크린샷 전용 프로그램도 있습니다. 캡처 도구를 사용하면 바탕화면의 모든 영역이나 전체화면을 캡처할 수 있습니다. 이 프로그램을 사용하여 스크린샷을 찍은 후 사진을 편집하고 컴퓨터의 모든 폴더에 저장할 수 있습니다. 게다가 PicPick, Nimbus Screenshot, Screenshot Captor, Snipaste, Monosnap 등과 같이 컴퓨터에서 스크린샷을 찍기 위해 다른 앱을 사용할 수 있습니다. "},{"title":"MacOS​","type":1,"pageTitle":"스크린샷을 찍는 방법","url":"miscellaneous/take-screenshot/#macos","content":"Mac에서 스크린샷을 찍으려면 다음 버튼 조합을 사용하십시오. *⌘ Cmd + Shift + 3 ****길게 누릅니다.*** Mac은 전체 화면을 캡처하여 바탕 화면에 파일로 저장됩니다. 활성 창의 스크린샷을 찍으려면 다음 조합을 사용하십시오. ⌘ Cmd + Shift + 4 + 스페이스바 를 함께 길게 누릅니다. 포인터가 카메라 아이콘으로 변경됩니다. 창을 클릭하여 캡처합니다. 스크린샷 촬영을 취소하려면 Esc 버튼을 누르세요. 특정 영역의 스크린샷을 찍으려면 다음 조합을 사용해야 합니다. * *⌘ Cmd + Shift + 4**를 함께 길게 누릅니다. 십자선을 드래그하여 필요한 영역을 선택합니다. 마우스 또는 트랙패드를 놓아 스크린샷을 찍고, 취소하려면 Esc 버튼을 누르십시오. Touch Bar (MacBook Pro)의 스크린샷을 찍으려면 다음 조합을 사용합니다. ⌘ Cmd + Shift + 6를 길게 누릅니다.** Mac은 전체 Touch Bar 를 캡처하여 바탕화면에 파일로 저장합니다. 스크린샷을 저장하는 대신 클립보드에 복사하려면 위의 조합과 함께 Ctrl 을 누르십시오. 그런 다음 Cmd + V 조합을 사용하여 현재 편집 중인 문서 또는 이미지에 스크린샷(클립보드에서)을 붙여 넣을 수 있습니다. 미리보기를 사용하고 스크린샷 찍기 (선택한 영역, 창 또는 전체 화면)를 선택하여 스크린샷을 찍을 수도 있습니다. 미리보기를 사용하면 스크린샷을 JPG, TIFF, PDF 및 기타 파일 형식으로 저장할 수 있습니다. "},{"title":"기술 자료 업데이트","type":0,"sectionRef":"#","url":"miscellaneous/update-kb/","content":"","keywords":""},{"title":"변경 사항을 제안하거나 새 문서를 작성하는 방법​","type":1,"pageTitle":"기술 자료 업데이트","url":"miscellaneous/update-kb/#suggest-change","content":"위에서 언급한 GitHub의 기능을 사용하여 현재 문서에 대한 변경 내용을 제안하고 기술 자료에 새 문서를 추가할 수 있습니다. 플랫폼 작업 원칙에 익숙하지 않은 경우 이 섹션의 설명서를 읽는 것으로 시작하십시오.. 시작할 준비가 되면 KnowledgeBaseDNS repository에서 작업하십시오. 기술 자료의 모든 텍스트는 Markdown 마크업 언어로 작성되었습니다. 문서를 편집하거나 작성할 때 이것을 명심하십시오. 이 링크 따라 Markdown 구문에 대해 자세히 알아보세요. 기술 자료 웹 사이트는 최신 웹 사이트 생성기인 Docusaurus 2를 사용하여 제작되었습니다. 변경 또는 추가를 제안 할 때 모든 문서는 플랫폼의 원칙을 준수해야 한다는 점을 고려하십시오. 이 링크를 통해 사용할 수 있는 가이드에서 이에 대해 읽을 수 있습니다. 이 기술 자료를 컴퓨터에 배포하여 제안한 변경 사항을 미리 볼 수 있습니다. 이 작업을 수행하는 방법에 대한 자세한 지침은 파일 README.md 이 기술 자료의 GitHub 페이지에 있습니다. "},{"title":"기사 번역​","type":1,"pageTitle":"기술 자료 업데이트","url":"miscellaneous/update-kb/#translate-adguard","content":"기술 자료의 기존 기사 번역은 Crowdin 플랫폼에서 수행됩니다. 번역 및 Crowdin 작업에 대한 자세한 내용은 AdGuard Ad 차단 기술 자료의 전용 문서에서 찾을 수 있습니다. AdGuard DNS 기술 자료 문서에서 작업할 때 추가로 주의를 기울여 번역해야 하는 복수 양식이 포함된 문자열을 만날 수 있습니다. 별도의 기사에서 문자열을 복수형으로 번역할 때 발생할 수 있는 어려움에 대해 자세히 설명하고 Crowdin 플랫폼에서 문자열을 사용하는 방법에 대한 광범위한 지침을 제공했습니다. "},{"title":"미해결 문제에 대한 작업​","type":1,"pageTitle":"기술 자료 업데이트","url":"miscellaneous/update-kb/#미해결-문제에-대한-작업","content":"기술 자료 업데이트와 관련된 열린 작업이 있는 경우가 있습니다. 이 기술 자료에 대한 다른 변경 사항을 제안하는 방식으로 완료 속도를 높일 수 있습니다. 매력적이라고 생각되는 문제를 선택하고 작업을 시작하세요. 질문이 있는 경우 해당 문제에 대한 의견에서 바로 질문할 수 있습니다. "},{"title":"AdGuard DNS","type":0,"sectionRef":"#","url":"private-dns/api/","content":"","keywords":""},{"title":"Authentication​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#authentication","content":""},{"title":"Generate Access token​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#generate-access-token","content":"Make a POST request for the following URL with the given params to generate the access_token: https://api.adguard-dns.io/oapi/v1/oauth_token Parameter\tDescriptionusername\tAccount email password\tAccount password mfa_token\tTwo-Factor authentication token (if enabled in account settings) In the response, you will get both access_token and refresh_token. The access_token will expire after some specified seconds (represented by the expires_in param in the response). You can regenerate a new access_token using the refresh_token (Refer: Generate Access Token from Refresh Token). The refresh_token is permanent. To revoke a refresh_token, refer: Revoking a Refresh Token. Example request​ $ curl 'https://api.adguard-dns.io/oapi/v1/oauth_token' -i -X POST \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -d 'username=user%40adguard.com' \\ -d 'password=********' \\ -d 'mfa_token=727810'  Example response​ { &quot;access_token&quot;: &quot;jTFho_aymtN20pZR5RRSQAzd81I&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;refresh_token&quot;: &quot;H3SW6YFJ-tOPe0FQCM1Jd6VnMiA&quot;, &quot;expires_in&quot;: 2620978 }  "},{"title":"Generate Access Token from Refresh Token​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#generate-access-token-from-refresh-token","content":"Access tokens have limited validity. Once it expires, your app will have to use the refresh token to request for a new access token. Make the following POST request with the given params to get a new access token: https://api.adguard-dns.io/oapi/v1/oauth_token Parameter\tDescriptionrefresh_token\tREFRESH TOKEN using which a new access token has to be generated. Example request​ $ curl 'https://api.adguard-dns.io/oapi/v1/oauth_token' -i -X POST \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -d 'refresh_token=H3SW6YFJ-tOPe0FQCM1Jd6VnMiA'  Example response​ { &quot;access_token&quot;: &quot;xQnT7GYT6Ag--3oY_EcOOdXe-I0&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;refresh_token&quot;: &quot;H3SW6YFJ-tOPe0FQCM1Jd6VnMiA&quot;, &quot;expires_in&quot;: 2627999 }  "},{"title":"Revoking a Refresh Token​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#revoking-a-refresh-token","content":"To revoke a refresh token, make the following POST request with the given params: https://api.adguard-dns.io/oapi/v1/revoke_token Request Example​ $ curl 'https://api.adguard-dns.com/oapi/v1/revoke_token' -i -X POST \\ -d 'token=H3SW6YFJ-tOPe0FQCM1Jd6VnMiA'  Parameter\tDescriptionrefresh_token\tREFRESH TOKEN which is to be revoked "},{"title":"Accessing API​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#accessing-api","content":"Once the access and the refresh tokens are generated, API calls can be made by passing the access token in the header. Header name should be AuthorizationHeader value should be Bearer {access_token} "},{"title":"API​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#api","content":""},{"title":"OpenAPI spec​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#openapi-spec","content":"OpenAPI specification is available at https://api.adguard-dns.io/static/swagger/openapi.json. You can use different tools to view the list of available API methods. For instance, you can open this file in https://editor.swagger.io/. "},{"title":"Feedback​","type":1,"pageTitle":"AdGuard DNS","url":"private-dns/api/#feedback","content":"If you would like this API to be extended with new methods, please email us to devteam@adguard.com and let us know what you would like to be added. "},{"title":"Private AdGuard DNS","type":0,"sectionRef":"#","url":"private-dns/overview/","content":"","keywords":""},{"title":"What is Private AdGuard DNS​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#what-is-private-adguard-dns","content":"Private AdGuard DNS is a DNS server that, in addition to benefits of a public DNS server (such as traffic encryption and domain blocklists), provides features like flexible customization, DNS statistics and parental control and is easily managed through a handy dashboard. "},{"title":"Why Private AdGuard DNS is needed​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#why-private-adguard-dns-is-needed","content":"Today, you can connect anything to the Internet: TVs, refrigerators, smart bulbs, or speakers. But along with the undeniable conveniences you get trackers and ads. A simple browser-based ad blocker will not protect you in this case, but AdGuard DNS, which you can set up to filter traffic, block content and trackers, has a system-wide effect. We already have public AdGuard DNS and AdGuard Home. These solutions work fine for some users, but for others, the public AdGuard DNS lacks the flexibility of configuration, while the AdGuard Home lacks simplicity. That's where private AdGuard DNS comes into play. It has the best of both worlds: it offers customizability, control and information - all through a simple easy-to-use dashboard. "},{"title":"The difference between Private and Public AdGuard DNS​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#the-difference-between-private-and-public-adguard-dns","content":"Here is a simple comparison of features available in Public AdGuard DNS and Private AdGuard DNS servers. Public AdGuard DNS\tPrivate AdGuard DNSDNS traffic encryption\tDNS traffic encryption Pre-determined domain blocklists\tCustomizable domain blocklists -\tCustom DNS filtering rules with import/export feature -\tRequest statistics (see where do your DNS requests go: which countries, which companies etc.) -\tDetailed query log -\tParental control "},{"title":"How to set up Private AdGuard DNS​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#how-to-set-up-private-adguard-dns","content":"Go to your AdGuard DNS dashboard (if not logged in, log in using your AdGuard account)Click “Connect device” and follow on-screen instructions Supported platforms: - Android - iOS - Windows - Mac - Linux - Routers - Gaming consoles "},{"title":"Private AdGuard DNS features​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#private-adguard-dns-features","content":""},{"title":"Blocklists management​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#blocklists-management","content":"With &quot;Blocklists&quot; feature you can set which domains you want to block and which you don't. Сhoose from wide variety of blocklists for different purposes.  "},{"title":"User rules​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#user-rules","content":"For times when pre-installed Blocklists with thousands of rules are not enough, we have a handy function called &quot;User rules&quot;. Here you can add custom rules manually to block/unblock a certain domain or import custom rules lists (check out DNS filtering rules syntax). You can export the lists.  "},{"title":"Statistics​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#statistics","content":"In &quot;Statistics&quot; tab you can see all the summarized statistics on DNS queries made by devices connected to your Private AdGuard DNS. It shows the total number and geography of requests, the number of blocked requests, the list of companies the requests were addressed to, requests types and top requested domains.  "},{"title":"Traffic destination​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#traffic-destination","content":"This feature shows you where DNS requests sent by your devices go. On top of seeing the map of request destinations, you can filter the information by date, device and country.  "},{"title":"Companies​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#companies","content":"This tab allows you to quickly check which companies send the most requests, and which companies have the most blocked requests.  "},{"title":"Query log​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#query-log","content":"This is a detailed log where you can check out the information on every single request and also sort requests by status, type, company, device, time, country.  "},{"title":"Parental control​","type":1,"pageTitle":"Private AdGuard DNS","url":"private-dns/overview/#parental-control","content":"To protect your child from online content you deem inappropriate, set up and activate the Parental control option. In addition to options such as &quot;adult content&quot; blocking and safe search, we've added the ability to manually specify domains for blocking and set a schedule for the Parental control to work accordingly.  In case you don't have Private AdGuard DNS yet, you can get it on the official website. "},{"title":"개요","type":0,"sectionRef":"#","url":"public-dns/overview/","content":"","keywords":""},{"title":"AdGuard DNS란 무엇인가요?​","type":1,"pageTitle":"개요","url":"public-dns/overview/#adguard-dns란-무엇인가요","content":"AdGuard DNS는 무료로, 안전한 연결을 제공하고 추적, 광고, 피싱 및 성인 콘텐츠(선택 사항)를 차단할 수 있는 개인 정보 보호 지향적인 DNS 입니다. AdGuard DNS는 응용 프로그램을 설치할 필요가 없습니다. 사용하기 쉽고 모든 장치 (스마트폰, 컴퓨터, 공유기, 게임 콘솔 등) 에 쉽게 설정할 수 있습니다. "},{"title":"공용 AdGuard DNS 서버​","type":1,"pageTitle":"개요","url":"public-dns/overview/#공용-adguard-dns-서버","content":"AdGuard DNS에는 각기 다른 3개의 공개 서버가 있습니다. &quot;기본&quot; 서버는 광고, 추적기, 멀웨어 및 피싱 웹사이트를 차단하기 위한 것입니다. &quot;가족 보호&quot;도 동일하지만 성인 콘텐츠가 포함된 웹사이트를 차단하고 이를 제공하는 브라우저에서 &quot;안전한 검색&quot; 옵션을 제공합니다. &quot;필터링 하지 않음&quot; 은 안전하고 신뢰할 수 있는 연결을 제공하지만 아무것도 차단하지 않습니다. 당신은 우리의 웹 사이트에서 모든 장치에서 AdGuard DNS를 설정하는 방법에 대한 자세한 지침을 찾을 수 있습니다. 각 서버는 DNSCrypt, DNS-over-HTTPS(DoH), DNS-over-TLS(DoT) 및 DNS-over-QUIC(DoQ)와 같은 다양한 보안 프로토콜을 지원합니다. "},{"title":"AdGuard DNS 프로토콜​","type":1,"pageTitle":"개요","url":"public-dns/overview/#adguard-dns-프로토콜","content":"일반 DNS(IPv4 및 IPv6 모두) 외에도 AdGuard DNS는 다양한 암호화 프로토콜을 지원하므로 가장 적합한 프로토콜을 선택할 수 있습니다. "},{"title":"DNSCrypt​","type":1,"pageTitle":"개요","url":"public-dns/overview/#dnscrypt","content":"AdGuard DNS를 사용하면 특정 암호화 프로토콜 DNSCrypt를 사용할 수 있습니다. 그 덕분에 모든 DNS 요청이 암호화되어 요청 가로채기 및 도청, 변경으로부터 사용자를 보호합니다. 그러나 DoH, DoT 및 DoQ 프로토콜에 비교할 때, DNSCrypt는 더 이상 사용되지 않는 것으로 간주되며 가능한 경우 이러한 프로토콜을 사용하는 것이 좋습니다. "},{"title":"DNS-over-HTTPS (DoH) and DNS-over-TLS (DoT)​","type":1,"pageTitle":"개요","url":"public-dns/overview/#dns-over-https-doh-and-dns-over-tls-dot","content":"DoH와 DoT는 점점 더 많은 인기를 얻고 가까운 장래에 업계 표준이 될 최신 보안 DNS 프로토콜입니다. 모두 DNSCrypt보다 안정적이며 AdGuard DNS에서 지원됩니다. "},{"title":"DNS-over-QUIC (DoQ)​","type":1,"pageTitle":"개요","url":"public-dns/overview/#dns-over-quic-doq","content":"DNS-over-QUIC는 새로운 DNS 암호화 프로토콜이며 AdGuard DNS는 이를 지원하는 첫 플렛폼입니다. DoH 및 DoT와 달리 QUIC를 전송 프로토콜로 사용하고 마지막으로 UDP를 통해 작동하는 DNS를 루트로 되돌립니다. 이는 QUIC의 좋은 장점들 - 기본 암호화, 연결 시간 단축, 데이터 패킷 손실 시 성능 향상 등을 제공합니다. 또한 QUIC는 transport-level 프로토콜로 간주되며 DoH에서 발생할 수있는 메타 데이터 유출의 위험이 없습니다. "},{"title":"알려진 DNS 공급자","type":0,"sectionRef":"#","url":"general/dns-providers/","content":"","keywords":""},{"title":"AdGuard DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#adguard-dns","content":"AdGuard DNS 은 광고 차단, 개인 정보 보호 및 자녀 보호를 위한 대체 솔루션입니다. 사용하는 플랫폼과 장치에 관계없이 온라인 광고, 추적기 및 피싱에 대해 필요한 수 많은 보호 기능을 제공합니다. 기본 모드​ 이러한 서버들은 광고, 추적 및 피싱을 차단합니다. 프로토콜\t주소\tDNS, IPv4\t94.140.14.14 and 94.140.15.15\tAdGuard에 추가 DNS, IPv6\t2a10:50c0::ad1:ff and 2a10:50c0::ad2:ff\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.adguard.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.adguard.com\tAdGuard에 추가 DNS-over-QUIC\tquic://dns.adguard.com\tAdGuard에 추가 DNSCrypt, IPv4\t공급자: 2.dnscrypt.default.ns1.adguard.com IP: 94.140.14.14:5443\tAdGuard에 추가 DNSCrypt, IPv6\t공급자: 2.dnscrypt.default.ns1.adguard.com IP: [2a10:50c0::ad1:ff]:5443\tAdGuard에 추가 자녀 보호​ 이 서버는 기본 기능 + 성인 웹사이트 차단 + 안전한 검색을 제공합니다. 프로토콜\t주소\tDNS, IPv4\t94.140.14.15 및 94.140.15.16\tAdGuard에 추가 DNS, IPv6\t2a10:50c0::bad1:ff 및 2a10:50c0::bad2:ff\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns-family.adguard.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns-family.adguard.com\tAdGuard에 추가 DNS-over-QUIC\tquic://dns-family.adguard.com\tAdGuard에 추가 DNSCrypt, IPv4\t공급자: 2.dnscrypt.family.ns1.adguard.com IP: 94.140.14.15:5443\tAdGuard에 추가 DNSCrypt, IPv6\t공급자: 2.dnscrypt.family.ns1.adguard.com IP: [2a10:50c0::bad1:ff]:5443\tAdGuard에 추가 필터링 하지 않음​ 이 서버는 안전하고 안정적인 연결을 제공하지만 &quot;광고 차단&quot; 및 &quot;가족 보호&quot; 같은 것은 필터링하지 않습니다. 프로토콜\t주소\tDNS, IPv4\t94.140.14.140 및 94.140.14.141\tAdGuard에 추가 DNS, IPv6\t2a10:50c0::1:ff 및 2a10:50c0::2:ff\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns-unfiltered.adguard.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns-unfiltered.adguard.com\tAdGuard에 추가 DNS-over-QUIC\tquic://dns-unfiltered.adguard.com\tAdGuard에 추가 DNSCrypt, IPv4\t공급자: 2.dnscrypt.unfiltered.ns1.adguard.com IP: 94.140.14.140:5443\tAdGuard에 추가 DNSCrypt, IPv6\t공급자: 2.dnscrypt.unfiltered.ns1.adguard.com IP: [2a10:50c0::1:ff]:5443\tAdGuard에 추가 "},{"title":"Yandex DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#yandex-dns","content":"Yandex.DNS is a free recursive DNS service. Yandex.DNS' servers are located in Russia, CIS countries, and Western Europe. Users' requests are processed by the nearest data center which provides high connection speeds. Basic​ In &quot;Basic&quot; mode, there is no traffic filtering 프로토콜\t주소\tDNS, IPv4\t77.88.8.8 and 77.88.8.1\tAdGuard에 추가 DNS, IPv6\t2a02:6b8::feed:0ff and 2a02:6b8:0:1::feed:0ff\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.browser.yandex.net IP: 77.88.8.78:15353\tAdGuard에 추가 Safe​ In &quot;Safe&quot; mode, protection from infected and fraudulent sites is provided 프로토콜\t주소\tDNS, IPv4\t77.88.8.88 and 77.88.8.2\tAdGuard에 추가 DNS, IPv6\t2a02:6b8::feed:bad and 2a02:6b8:0:1::feed:bad\tAdGuard에 추가 Family​ In &quot;Family&quot; mode, protection from infected, fraudulent and adult sites is provided 프로토콜\t주소\tDNS, IPv4\t77.88.8.3 and 77.88.8.7\tAdGuard에 추가 DNS, IPv6\t2a02:6b8::feed:a11 and 2a02:6b8:0:1::feed:a11\tAdGuard에 추가 "},{"title":"CleanBrowsing​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cleanbrowsing","content":"Cleanbrowsing is a DNS service which provides customizable filtering. This service offers a safe way to browse the web without inappropriate content. Family Filter​ Blocks access to all adult, pornographic and explicit sites, including proxy &amp; VPN domains and mixed content sites 프로토콜\t주소\tDNS, IPv4\t185.228.168.168 and 185.228.169.168\tAdGuard에 추가 DNS, IPv6\t2a0d:2a00:1:: and 2a0d:2a00:2::\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: cleanbrowsing.org IP: 185.228.168.168:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: cleanbrowsing.org IP: [2a0d:2a00:1::]:8443\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.cleanbrowsing.org/doh/family-filter/\tAdGuard에 추가 DNS-over-TLS\ttls://family-filter-dns.cleanbrowsing.org\tAdGuard에 추가 Adult Filter​ Less restrictive than the Family filter, it only blocks access to adult content and malicious and phishing domains 프로토콜\t주소\tDNS, IPv4\t185.228.168.10 and 185.228.169.11\tAdGuard에 추가 DNS, IPv6\t2a0d:2a00:1::1 and 2a0d:2a00:2::1\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: cleanbrowsing.org IP: 185.228.168.10:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: cleanbrowsing.org IP: [2a0d:2a00:1::1]:8443\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.cleanbrowsing.org/doh/adult-filter/\tAdGuard에 추가 DNS-over-TLS\ttls://adult-filter-dns.cleanbrowsing.org\tAdGuard에 추가 Security Filter​ Blocks phishing, spam and malicious domains 프로토콜\t주소\tDNS, IPv4\t185.228.168.9 and 185.228.169.9\tAdGuard에 추가 DNS, IPv6\t2a0d:2a00:1::2 and 2a0d:2a00:2::2\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.cleanbrowsing.org/doh/security-filter/\tAdGuard에 추가 DNS-over-TLS\ttls://security-filter-dns.cleanbrowsing.org\tAdGuard에 추가 "},{"title":"Comodo Secure DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#comodo-secure-dns","content":"Comodo Secure DNS is a domain name resolution service that resolves your DNS requests through worldwide network of DNS servers. Removes excessive ads and protects from phishing and spyware. 프로토콜\t주소\tDNS, IPv4\t8.26.56.26 and 8.20.247.20\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.shield-2.dnsbycomodo.com IP: 8.20.247.2\tAdGuard에 추가 "},{"title":"Neustar Recursive DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#neustar-recursive-dns","content":"Neustar Recursive DNS is a free cloud-based recursive DNS service that delivers fast and reliable access to sites and online applications with built-in security and threat intelligence. Reliability &amp; Performance 1​ These servers provide reliable and fast DNS lookups without blocking any specific categories 프로토콜\t주소\tDNS, IPv4\t156.154.70.1 and 156.154.71.1\tAdGuard에 추가 DNS, IPv6\t2610:a1:1018::1 and 2610:a1:1019::1\tAdGuard에 추가 Reliability &amp; Performance 2*​ These servers provide reliable and fast DNS lookups without blocking any specific categories and also prevent redirecting NXDomain (Non-existent Domain) responses to a landing page 프로토콜\t주소\tDNS, IPv4\t156.154.70.5 and 156.154.71.5\tAdGuard에 추가 DNS, IPv6\t2610:a1:1018::5 and 2610:a1:1019::5\tAdGuard에 추가 Threat Protection​ These servers provide protection against malicious domains and also include &quot;Reliability &amp; Performance&quot; features 프로토콜\t주소\tDNS, IPv4\t156.154.70.2 and 156.154.71.2\tAdGuard에 추가 DNS, IPv6\t2610:a1:1018::2 and 2610:a1:1019::2\tAdGuard에 추가 Family Secure​ These servers provide blocking access to mature content and also include &quot;Reliability &amp; Performance&quot; + &quot;Threat Protection&quot; features 프로토콜\t주소\tDNS, IPv4\t156.154.70.3 and 156.154.71.3\tAdGuard에 추가 DNS, IPv6\t2610:a1:1018::3 and 2610:a1:1019::3\tAdGuard에 추가 Business Secure​ These servers provide blocking unwanted and time-wasting content and also include &quot;Reliability &amp; Performance&quot; + &quot;Threat Protection&quot; + &quot;Family Secure&quot; features 프로토콜\t주소\tDNS, IPv4\t156.154.70.4 and 156.154.71.4\tAdGuard에 추가 DNS, IPv6\t2610:a1:1018::4 and 2610:a1:1019::4\tAdGuard에 추가 "},{"title":"Cisco OpenDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cisco-opendns","content":"Cisco OpenDNS is a service which extends the DNS by incorporating features such as content filtering and phishing protection with a zero downtime. Standard​ DNS servers with custom filtering that protects your device from malware 프로토콜\t주소\tDNS, IPv4\t208.67.222.222 and 208.67.220.220\tAdGuard에 추가 DNS, IPv6\t2620:119:35::35 and 2620:119:53::53\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.opendns.com IP: 208.67.220.220\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.opendns.com IP: [2620:0:ccc::2]\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.opendns.com/dns-query\tAdGuard에 추가 FamilyShield​ OpenDNS servers that provide adult content blocking 프로토콜\t주소\tDNS, IPv4\t208.67.222.123 and 208.67.220.123\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.opendns.com IP: 208.67.220.123\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.familyshield.opendns.com/dns-query\tAdGuard에 추가 "},{"title":"Google DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#google-dns","content":"Google DNS is a free, global DNS resolution service that you can use as an alternative to your current DNS provider. 프로토콜\t주소\tDNS, IPv4\t8.8.8.8 and 8.8.4.4\tAdGuard에 추가 DNS, IPv6\t2001:4860:4860::8888 and 2001:4860:4860::8844\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.google/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.google\tAdGuard에 추가 "},{"title":"Cloudflare DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cloudflare-dns","content":"Cloudflare DNS is a free and fast DNS service which functions as a recursive name server providing domain name resolution for any host on the Internet. Standard​ 프로토콜\t주소\tDNS, IPv4\t1.1.1.1 and 1.0.0.1\tAdGuard에 추가 DNS, IPv6\t2606:4700:4700::1111 and 2606:4700:4700::1001\tAdGuard에 추가 DNS-over-HTTPS, IPv4\thttps://dns.cloudflare.com/dns-query\tAdGuard에 추가 DNS-over-HTTPS, IPv6\thttps://dns.cloudflare.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://1dot1dot1dot1.cloudflare-dns.com\tAdGuard에 추가 Malware blocking only​ 프로토콜\t주소\tDNS, IPv4\t1.1.1.2 and 1.0.0.2\tAdGuard에 추가 DNS, IPv6\t2606:4700:4700::1112 and 2606:4700:4700::1002\tAdGuard에 추가 DNS-over-HTTPS\thttps://security.cloudflare-dns.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://security.cloudflare-dns.com\tAdGuard에 추가 Malware and adult content blocking​ 프로토콜\t주소\tDNS, IPv4\t1.1.1.3 and 1.0.0.3\tAdGuard에 추가 DNS, IPv6\t2606:4700:4700::1113 and 2606:4700:4700::1003\tAdGuard에 추가 DNS-over-HTTPS, IPv4\thttps://family.cloudflare-dns.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://family.cloudflare-dns.com\tAdGuard에 추가 "},{"title":"Quad9 DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#quad9-dns","content":"Quad9 DNS is a free, recursive, anycast DNS platform that provides high-performance, privacy, and security protection from phishing and spyware. Quad9 servers don't provide a censoring component. Standard​ Regular DNS servers which provide protection from phishing and spyware. They include blocklists, DNSSEC validation, and other security features. 프로토콜\t주소\tDNS, IPv4\t9.9.9.9 and 149.112.112.112\tAdGuard에 추가 DNS, IPv6\t2620:fe::fe IP: 2620:fe::fe:9\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.quad9.net IP: 9.9.9.9:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.quad9.net IP: [2620:fe::fe]:8443\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.quad9.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.quad9.net\tAdGuard에 추가 Unsecured​ Unsecured DNS servers provide no security blocklist, no DNSSEC, No EDNS client-Subnet 프로토콜\t주소\tDNS, IPv4\t9.9.9.10 and 149.112.112.10\tAdGuard에 추가 DNS, IPv6\t2620:fe::10 IP: 2620:fe::fe:10\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.quad9.net IP: 9.9.9.10:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.quad9.net IP: [2620:fe::fe:10]:8443\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns10.quad9.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns10.quad9.net\tAdGuard에 추가 ECS support​ EDNS Client-Subnet is a method that includes components of end-user IP address data in requests that are sent to authoritative DNS servers. It provides security blocklist, DNSSEC, EDNS Client-Subnet. 프로토콜\t주소\tDNS, IPv4\t9.9.9.11 and 149.112.112.11\tAdGuard에 추가 DNS, IPv6\t2620:fe::11 IP: 2620:fe::fe:11\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.quad9.net IP: 9.9.9.11:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.quad9.net IP: [2620:fe::11]:8443\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns11.quad9.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns11.quad9.net\tAdGuard에 추가 "},{"title":"Verisign Public DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#verisign-public-dns","content":"Verisign Public DNS is a free DNS service that offers improved DNS stability and security over other alternatives. Verisign respects users' privacy: it doesn't sell public DNS data to third parties and redirect users' queries to serve them any ads. 프로토콜\t주소\tDNS, IPv4\t64.6.64.6 or 64.6.65.6\tAdGuard에 추가 DNS, IPv6\t2620:74:1b::1:1 or 2620:74:1c::2:2\tAdGuard에 추가 "},{"title":"SWITCH DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#switch-dns","content":"SWITCH DNS is a swiss public DNS service provided by switch.ch 프로토콜\t주소\tDNS, IPv4\tProvider: dns.switch.ch IP: 130.59.31.248\tAdGuard에 추가 DNS, IPv6\tProvider: dns.switch.ch IPv6: 2001:620:0:ff::2\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.switch.ch/dns-query\tAdGuard에 추가 DNS-over-TLS\tHostname: tls://dns.switch.ch IP: 130.59.31.248 and IPv6: 2001:620:0:ff::2\tAdGuard에 추가 "},{"title":"Dyn DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dyn-dns","content":"Dyn DNS is a free alternative DNS service by Dyn 프로토콜\t주소\tDNS, IPv4\t216.146.35.35 and 216.146.36.36\tAdGuard에 추가 "},{"title":"DNS.WATCH​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dnswatch","content":"DNS.WATCH is a fast and free server without logging with a privacy protection feature. 프로토콜\t주소\tDNS, IPv4\t84.200.69.80 and 84.200.70.40\tAdGuard에 추가 DNS, IPv6\t2001:1608:10:25::1c04:b12f and 2001:1608:10:25::9249:d69b\tAdGuard에 추가 "},{"title":"FutureDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#futuredns","content":"FutureDNS is a privacy-friendly DNS service with OpenNIC support that blocks ads, trackers, malware and does not log any data. Anycast Network\t주소\tDNS-over-HTTPS\thttps://dns.futuredns.me/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.futuredns.me\tAdGuard에 추가 DNS-over-QUIC\tquic://dns.futuredns.me\tAdGuard에 추가 Location\tAddress - IPv4London, UK\t52.56.224.201 Milan, Italy\t15.161.11.3 Stockholm, Sweden\t13.49.168.178 Ashburn, USA\t52.0.69.145 San Francisco, USA\t13.56.204.161 Montreal, Canada\t3.97.137.100 Singapore\t54.254.82.60 Tokyo, Japan\t54.199.94.55 Mumbai, India\t3.7.162.217 São Paulo, Brazil\t177.71.191.153 "},{"title":"SkyDNS RU​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#skydns-ru","content":"SkyDNS solutions for content filtering and internet security. 프로토콜\t주소\tDNS, IPv4\t193.58.251.251\tAdGuard에 추가 "},{"title":"Comss.ru DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#comssru-dns","content":"Comss.one DNS is a fast and secure DNS servers with protection against ads, tracking and phishing. West DNS Server (Main)​ 프로토콜\t주소\tDNS, IPv4\t92.38.152.163 and 93.115.24.204\tAdGuard에 추가 DNS, IPv6\t2a03:90c0:56::1a5 and 2a02:7b40:5eb0:e95d::1\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.dns.comss.one IP: 94.176.233.93:443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.dns.comss.one IP: [2a02:7b40:5eb0:e95d::1]:443\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.comss.one/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.comss.one\tAdGuard에 추가 East DNS Server (Siberia and Far East)​ 프로토콜\t주소\tDNS, IPv4\t92.223.109.31 and 91.230.211.67\tAdGuard에 추가 DNS, IPv6\t2a03:90c0:b5::1a and 2a04:2fc0:39::47\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.east.comss.one/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.east.comss.one\tAdGuard에 추가 "},{"title":"Safe DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#safe-dns","content":"Safe DNS is a global anycast network which consists of servers located throughout the world — both Americas, Europe, Africa, Australia, and the Far East to ensure a fast and reliable DNS resolving from any point worldwide. 프로토콜\t주소\tDNS, IPv4\t195.46.39.39 and 195.46.39.40\tAdGuard에 추가 "},{"title":"CIRA Canadian Shield DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cira-canadian-shield-dns","content":"CIRA Shield DNS protects against theft of personal and financial data. Keep viruses, ransomware, and other malware out of your home. Private​ In &quot;Private&quot; mode, DNS resolution only 프로토콜\t주소\tDNS, IPv4\t149.112.121.10 and 149.112.122.10\tAdGuard에 추가 DNS, IPv6\t2620:10A:80BB::10 and 2620:10A:80BC::10\tAdGuard에 추가 DNS-over-HTTPS\thttps://private.canadianshield.cira.ca/dns-query\tAdGuard에 추가 DNS-over-TLS - Private\tHostname: tls://private.canadianshield.cira.ca IP: 149.112.121.10 and IPv6: 2620:10A:80BB::10\tAdGuard에 추가 Protected​ In &quot;Protected&quot; mode, malware and phishing protection 프로토콜\t주소\tDNS, IPv4\t149.112.121.20 and 149.112.122.20\tAdGuard에 추가 DNS, IPv6\t2620:10A:80BB::20 and 2620:10A:80BC::20\tAdGuard에 추가 DNS-over-HTTPS\thttps://protected.canadianshield.cira.ca/dns-query\tAdGuard에 추가 DNS-over-TLS - Protected\tHostname: tls://protected.canadianshield.cira.ca IP: 149.112.121.20 and IPv6: 2620:10A:80BB::20\tAdGuard에 추가 Family​ In &quot;Family&quot; mode, Protected + blocking adult content 프로토콜\t주소\tDNS, IPv4\t149.112.121.30 and 149.112.122.30\tAdGuard에 추가 DNS, IPv6\t2620:10A:80BB::30 and 2620:10A:80BC::30\tAdGuard에 추가 DNS-over-HTTPS\thttps://family.canadianshield.cira.ca/dns-query\tAdGuard에 추가 DNS-over-TLS - Family\tHostname: tls://protected.canadianshield.cira.ca IP: 149.112.121.30 and IPv6: 2620:10A:80BB::30\tAdGuard에 추가 "},{"title":"OpenNIC DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#opennic-dns","content":"OpenNIC DNS is a free alternative DNS service by OpenNIC Project 프로토콜\t주소\tDNS, IPv4\t185.121.177.177 and 169.239.202.202\tAdGuard에 추가 DNS, IPv6\t2a05:dfc7:5::53 and 2a05:dfc7:5353::53\tAdGuard에 추가 "},{"title":"BlahDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#blahdns","content":"BlahDNS A small hobby DNS project. No logs, Ethereum Name Service, DNSSEC ready &amp; Filtered ads, trackers, malwares Finland DNS Server​ 프로토콜\t주소\tDNS-over-TLS, IPv4\tHostname: tls://dot-fi.blahdns.com IP: 95.216.212.177\tAdGuard에 추가 DNS-over-HTTPS, IPv4\tHostname: https://doh-fi.blahdns.com/dns-query IP: 95.216.212.177\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.blahdns.com IP: 95.216.212.177:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.blahdns.com IP: 2a01:4f9:c010:43ce::1:8443\tAdGuard에 추가 Japan DNS Server​ 프로토콜\t주소\tDNS-over-TLS, IPv4\tHostname: tls://dot-jp.blahdns.com IP: 139.162.112.47\tAdGuard에 추가 DNS-over-HTTPS, IPv4\tHostname: https://doh-jp.blahdns.com/dns-query\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.blahdns.com IP: 139.162.112.47:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.blahdns.com IP: [2400:8902::f03c:92ff:fe27:344b]:8443\tAdGuard에 추가 Germany DNS Server​ 프로토콜\t주소\tDNS-over-TLS, IPv4\tHostname: tls://dot-de.blahdns.com IP: 159.69.198.101\tAdGuard에 추가 DNS-over-HTTPS, IPv4\tHostname: https://doh-de.blahdns.com/dns-query IP: 159.69.198.101\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.blahdns.com IP: 159.69.198.101:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.blahdns.com IP: 2a01:4f8:1c1c:6b4b::1:8443\tAdGuard에 추가 "},{"title":"Snopyta DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#snopyta-dns","content":"Snopyta DNS is a privacy friendly DNS service run by Noah Seefried. 프로토콜\t주소\tDNS-over-HTTPS\thttps://fi.doh.dns.snopyta.org/dns-query IP: 95.216.24.230 and IPv6: 2a01:4f9:2a:1919::9301\tAdGuard에 추가 DNS-over-TLS\ttls://fi.dot.dns.snopyta.org IP: 95.216.24.230 and IPv6: 2a01:4f9:2a:1919::9301\tAdGuard에 추가 "},{"title":"DNS for Family​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dns-for-family","content":"DNS for Family aims to block adult websites. It helps to children and everyone for safely surf internet without worrying about get followed to harmful websites. 프로토콜\t주소\tDNS-over-HTTPS\thttps://dns-doh.dnsforfamily.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns-dot.dnsforfamily.com\tAdGuard에 추가 DNS, IPv4\t94.130.180.225 and 78.47.64.161\tAdGuard에 추가 DNS, IPv6\t2a01:4f8:1c0c:40db::1 and 2a01:4f8:1c17:4df8::1\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: dnsforfamily.com IP: 94.130.180.225\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: dnsforfamily.com IP: [2a01:4f8:1c0c:40db::1]\tAdGuard에 추가 "},{"title":"CZ.NIC ODVR​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cznic-odvr","content":"CZ.NIC ODVR CZ.NIC ODVR are Open DNSSEC Validating Resolvers. CZ.NIC neither collect any personal data nor gather information on pages where devices sends personal data. 프로토콜\t주소\tDNS, IPv4\t193.17.47.1 and 185.43.135.1\tAdGuard에 추가 DNS, IPv6\t2001:148f:ffff::1 and 2001:148f:fffe::1\tAdGuard에 추가 DNS-over-HTTPS\thttps://odvr.nic.cz/doh\tAdGuard에 추가 DNS-over-TLS\ttls://odvr.nic.cz\tAdGuard에 추가 "},{"title":"Ali DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#ali-dns","content":"Ali DNS is a free recursive DNS service that committed to providing fast, stable and secure DNS resolution for the majority of Internet users. It includes AliGuard facility to protect users from various attacks and threats. 프로토콜\t주소\tDNS, IPv4\t223.5.5.5 and 223.6.6.6\tAdGuard에 추가 DNS, IPv6\t2400:3200::1 and 2400:3200:baba::1\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.alidns.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.alidns.com\tAdGuard에 추가 "},{"title":"CFIEC Public DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#cfiec-public-dns","content":"IPv6-based anycast DNS service with strong security capabilities and protection from spyware, malicious websites. It support DNS64 to provide domain name resolution only for IPv6 users. 프로토콜\t주소\tDNS, IPv6\t240C::6666 and 240C::6644\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.cfiec.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.cfiec.net\tAdGuard에 추가 "},{"title":"Nawala Childprotection DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#nawala-childprotection-dns","content":"Nawala Childprotection DNS is an anycast Internet filtering system that protects children from inappropriate websites and abusive contents. 프로토콜\t주소\tDNS, IPv4\t180.131.144.144 and 180.131.145.145\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.nawala.id IP: 180.131.144.144\tAdGuard에 추가 "},{"title":"360 Secure DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#360-secure-dns","content":"360 Secure DNS is a industry-leading recursive DNS service with advanced network security threat protection. 프로토콜\t주소\tDNS, IPv4\t101.226.4.6 and 218.30.118.6\tAdGuard에 추가 DNS, IPv4\t123.125.81.6 and 140.207.198.6\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.360.cn/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.360.cn\tAdGuard에 추가 "},{"title":"IIJ.JP DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#iijjp-dns","content":"IIJ.JP is a public DNS service operated by Internet Initiative Japan. It also blocks child abuse content. 프로토콜\t주소\tDNS-over-HTTPS\thttps://public.dns.iij.jp/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://public.dns.iij.jp\tAdGuard에 추가 "},{"title":"DNSPod Public DNS+​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dnspod-public-dns","content":"DNSPod Public DNS+ is a privacy-friendly DNS provider with years of experience in domain name resolution services development, it aims to provide users more rapid, accurate and stable recursive resolution service. 프로토콜\t주소\tDNS, IPv4\t119.29.29.29 and 119.28.28.28\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.pub/dns-query\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.pub/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.pub\tAdGuard에 추가 "},{"title":"114DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#114dns","content":"114DNS is a professional and high-reliability DNS service. Normal​ Block ads and annoying websites 프로토콜\t주소\tDNS, IPv4\t114.114.114.114 and 114.114.115.115\tAdGuard에 추가 Safe​ Blocks phishing, malicious and other unsafe websites 프로토콜\t주소\tDNS, IPv4\t114.114.114.119 and 114.114.115.119\tAdGuard에 추가 Family​ These servers block adult websites and inappropriate contents. 프로토콜\t주소\tDNS, IPv4\t114.114.114.110 and 114.114.115.110\tAdGuard에 추가 "},{"title":"Quad101​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#quad101","content":"Quad101 is a free alternative DNS service without logging by TWNIC (Taiwan Network Information Center) 프로토콜\t주소\tDNS, IPv4\t101.101.101.101 and 101.102.103.104\tAdGuard에 추가 DNS, IPv6\t2001:de4::101 and 2001:de4::102\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.twnic.tw/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://101.101.101.101\tAdGuard에 추가 "},{"title":"OneDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#onedns","content":"OneDNS is a secure, fast, free niche DNS service with malicious domains blocking facility. Pure Edition​ 프로토콜\t주소\tDNS, IPv4\t117.50.10.10 and 52.80.52.52\tAdGuard에 추가 Block Edition​ 프로토콜\t주소\tDNS, IPv4\t117.50.11.11 and 52.80.66.66\tAdGuard에 추가 "},{"title":"Privacy-First DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#privacy-first-dns","content":"Privacy-First DNS block over 140K ads, ad-tracking, malware and phishing domains!. No logging, no ECS, DNSSEC validation, free! Singapore DNS Server​ | 프로토콜 | 주소 | Location | | | -------------- | -------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | | DNS, IPv4 | 174.138.21.128 | AdGuard에 추가 | | | DNS, IPv6 | 2400:6180:0:d0::5f6e:4001 | AdGuard에 추가 | | | DNSCrypt, IPv4 | Provider: 2.dnscrypt-cert.dns.tiar.app IP: 174.138.21.128 | AdGuard에 추가 | | | DNSCrypt, IPv6 | Provider: 2.dnscrypt-cert.dns.tiar.app IP: [2400:6180:0:d0::5f6e:4001] | AdGuard에 추가 | | | DNS-over-HTTPS | https://doh.tiarap.org/dns-query (cached via third-party) | AdGuard에 추가 | | | DNS-over-HTTPS | https://doh.tiar.app/dns-query | AdGuard에 추가 | | | DNS-over-QUIC | quic://doh.tiar.app | AdGuard에 추가 | | | DNS-over-TLS | tls://dot.tiar.app | AdGuard에 추가 | | Japan DNS Server​ 프로토콜\t주소\tDNS, IPv4\t172.104.93.80\tAdGuard에 추가 DNS, IPv6\t2400:8902::f03c:91ff:feda:c514\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.jp.tiar.app IP: 172.104.93.80\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.jp.tiar.app IP: [2400:8902::f03c:91ff:feda:c514]\tAdGuard에 추가 DNS-over-HTTPS\thttps://jp.tiarap.org/dns-query\tAdGuard에 추가 DNS-over-HTTPS\thttps://jp.tiar.app/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://jp.tiar.app\tAdGuard에 추가 "},{"title":"FreeDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#freedns","content":"FreeDNS is an open, free and public DNS Service provided by Virtexxa cloud services. No DNS redirects, no logging. 프로토콜\t주소\tDNS, IPv4\t172.104.237.57 and 172.104.49.100\tAdGuard에 추가 DNS, IPv4\t37.235.1.174 and 37.235.1.177\tAdGuard에 추가 "},{"title":"Freenom World​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#freenom-world","content":"Freenom World is a free anonymous DNS resolver by Freenom World 프로토콜\t주소\tDNS, IPv4\t80.80.80.80 and 80.80.81.81\tAdGuard에 추가 "},{"title":"OSZX DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#oszx-dns","content":"OSZX DNS is a small Ad-Blocking DNS hobby project. OSZX server​ These servers provide no ad blocking, keep no logs, and have DNSSEC enabled 프로토콜\t주소\tDNS, IPv4\t51.38.83.141\tAdGuard에 추가 DNS, IPv6\t2001:41d0:801:2000::d64\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.oszx.co IP: 51.38.83.141:5353\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.oszx.co IP: [2001:41d0:801:2000::d64]:5353\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.oszx.co/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.oszx.co\tAdGuard에 추가 PumpleX server​ These servers provide no ad blocking, keep no logs, and have DNSSEC enabled 프로토콜\t주소\tDNS, IPv4\t51.38.82.198\tAdGuard에 추가 DNS, IPv6\t2001:41d0:801:2000::1b28\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.pumplex.com IP: 51.38.82.198:5353\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.pumplex.com IP: [2001:41d0:801:2000::1b28]:5353\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.pumplex.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.pumplex.com\tAdGuard에 추가 "},{"title":"Applied Privacy DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#applied-privacy-dns","content":"Applied Privacy DNS operates DNS privacy services to help protect DNS traffic and to help diversify the DNS resolver landscape offering modern protocols. 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.applied-privacy.net/query\tAdGuard에 추가 DNS-over-TLS\ttls://dot1.applied-privacy.net\tAdGuard에 추가 "},{"title":"Strongarm DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#strongarm-dns","content":"Strongarm DNS is a DNS service by Strongarm that prevents people from interacting with malicious content 프로토콜\t주소\tDNS, IPv4\t54.174.40.213 and 52.3.100.184\tAdGuard에 추가 "},{"title":"SafeSurfer DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#safesurfer-dns","content":"SafeSurfer DNS is a DNS service by SafeSurfer that protects your device from harmful and adult contents. 프로토콜\t주소\tDNS, IPv4\t104.155.237.225 and 104.197.28.121\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.safesurfer.co.nz IP: 104.197.28.121\tAdGuard에 추가 "},{"title":"DeCloudUs DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#decloudus-dns","content":"DeCloudUs DNS A secure, private, open-source DNS resolver with malware protection, ad blocking and without logs. Degoogle and Ungoogle your phone, tablet, and computer. 프로토콜\t주소\tDNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.DeCloudUs-test IP: 78.47.212.211:9443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.DeCloudUs-test IP: [2a01:4f8:13a:250b::30]:9443\tAdGuard에 추가 DNS-over-HTTPS\thttps://dns.decloudus.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dns.decloudus.com\tAdGuard에 추가 "},{"title":"Lelux DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#lelux-dns","content":"Lelux.fi is run by Elias Ojala. Finland. 프로토콜\t주소\tDNS-over-HTTPS\thttps://resolver-eu.lelux.fi/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://resolver-eu.lelux.fi\tAdGuard에 추가 "},{"title":"Captnemo DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#captnemo-dns","content":"Captnemo DNS is a server running out of a Digital Ocean droplet in BLR1 region. Maintained by Abhay Rana aka Nemo. 프로토콜\t주소\tDNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.captnemo.in IP: 139.59.48.222:4434\tAdGuard에 추가 "},{"title":"DNS.SB​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dnssb","content":"DNS.SB provide free DNS service with no logging, DNSSEC enabled. 프로토콜\t주소\tDNS, IPv4\t185.222.222.222 and 45.11.45.11\tAdGuard에 추가 DNS, IPv6\t2a09:: and 2a11::\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.dns.sb/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://185.222.222.222\tAdGuard에 추가 "},{"title":"DNS Forge​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dns-forge","content":"DNS Forge is a redundant DNS resolver with an ad blocker and no logging provided by adminforge. 프로토콜\t주소\tDNS, IPv4\t176.9.93.198 and 176.9.1.117\tAdGuard에 추가 DNS, IPv6\t2a01:4f8:151:34aa::198 and 2a01:4f8:141:316d::117\tAdGuard에 추가 DNS-over-HTTPS\thttps://dnsforge.de/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dnsforge.de\tAdGuard에 추가 "},{"title":"Fondation Restena DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#fondation-restena-dns","content":"Restena DNS servers provided by Restena Foundation 프로토콜\t주소\tDNS-over-HTTPS\thttps://kaitain.restena.lu/dns-query IP: 158.64.1.29 and IPv6: 2001:a18:1::29\tAdGuard에 추가 DNS-over-TLS\ttls://kaitain.restena.lu IP: 158.64.1.29 and IPv6: 2001:a18:1::29\tAdGuard에 추가 "},{"title":"fvz DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#fvz-dns","content":"fvz DNS is a Fusl's public primary OpenNIC Tier2 Anycast DNS Resolver 프로토콜\t주소\tDNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.dnsrec.meo.ws IP: 185.121.177.177:5353\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.dnsrec.meo.ws IP: 169.239.202.202:5353\tAdGuard에 추가 "},{"title":"FFMUC DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#ffmuc-dns","content":"FFMUC free DNS servers provided by Freifunk München 프로토콜\t주소\tDNS-over-TLS, IPv4\tHostname: tls://dot.ffmuc.net\tAdGuard에 추가 DNS-over-HTTPS, IPv4\tHostname: https://doh.ffmuc.net/dns-query\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.ffmuc.net IP: 5.1.66.255:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.ffmuc.net IP: [2001:678:e68:f000::]:8443\tAdGuard에 추가 "},{"title":"Digitale Gesellschaft DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#digitale-gesellschaft-dns","content":"Digitale Gesellschaft is a public resolver operated by the Digital Society. Hosted in Zurich, Switzerland 프로토콜\t주소\tDNS-over-HTTPS\thttps://dns.digitale-gesellschaft.ch/dns-query IP: 185.95.218.42 and IPv6: 2a05:fc84::42\tAdGuard에 추가 DNS-over-TLS\ttls://dns.digitale-gesellschaft.ch IP: 185.95.218.43 and IPv6: 2a05:fc84::43\tAdGuard에 추가 "},{"title":"LibreDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#libredns","content":"LibreDNS is a public encrypted DNS service run by LibreOps. 프로토콜\t주소\tDNS, IPv4\t88.198.92.222\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.libredns.gr/dns-query\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.libredns.gr/ads\tAdGuard에 추가 DNS-over-TLS\ttls://dot.libredns.gr IP: 116.202.176.26\tAdGuard에 추가 "},{"title":"ibksturm DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#ibksturm-dns","content":"ibksturm DNS testing servers provided by ibksturm. OPENNIC, DNSSEC, no filtering, no logging 프로토콜\t주소\tDNS-over-TLS, IPv4\tHostname: tls://ibksturm.synology.me IP: 83.77.85.7\tAdGuard에 추가 DNS-over-HTTPS, IPv4\tHostname: https://ibksturm.synology.me/dns-query IP: 178.82.102.190\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.ibksturm IP: 83.77.85.7:8443\tAdGuard에 추가 DNSCrypt, IPv6\tProvider: 2.dnscrypt-cert.ibksturm IP: [2a02:1205:5055:de60:b26e:bfff:fe1d:e19b]:8443\tAdGuard에 추가 "},{"title":"DNS Privacy​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dns-privacy","content":"A collaborative open project to promote, implement and deploy DNS Privacy. DNS servers run by the Stubby developers 프로토콜\t주소\tDNS-over-TLS\tHostname: tls://getdnsapi.net IP: 185.49.141.37 and IPv6: 2a04:b900:0:100::37\tAdGuard에 추가 DNS-over-TLS\tProvider: Surfnet Hostname tls://dnsovertls.sinodun.com IP: 145.100.185.15 and IPv6: 2001:610:1:40ba:145:100:185:15\tAdGuard에 추가 DNS-over-TLS\tProvider: Surfnet Hostname tls://dnsovertls1.sinodun.com IP: 145.100.185.16 and IPv6: 2001:610:1:40ba:145:100:185:16\tAdGuard에 추가 Other DNS servers with 'no logging' policy 프로토콜\t주소\tDNS-over-TLS\tProvider: UncensoredDNS Hostname tls://unicast.censurfridns.dk IP: 89.233.43.71 and IPv6: 2a01:3a0:53:53::0\tAdGuard에 추가 DNS-over-TLS\tProvider: UncensoredDNS Hostname tls://anycast.censurfridns.dk IP: 91.239.100.100 and IPv6: 2001:67c:28a4::\tAdGuard에 추가 DNS-over-TLS\tProvider: dkg Hostname tls://dns.cmrg.net IP: 199.58.81.218and IPv6: 2001:470:1c:76d::53\tAdGuard에 추가 DNS-over-TLS, IPv4\tHostname: tls://dns.larsdebruin.net IP: 51.15.70.167\tAdGuard에 추가 DNS-over-TLS\tHostname tls://dns-tls.bitwiseshift.net IP: 81.187.221.24 and IPv6: 2001:8b0:24:24::24\tAdGuard에 추가 DNS-over-TLS\tHostname tls://ns1.dnsprivacy.at IP: 94.130.110.185 and IPv6: 2a01:4f8:c0c:3c03::2\tAdGuard에 추가 DNS-over-TLS\tHostname tls://ns2.dnsprivacy.at IP: 94.130.110.178 and IPv6: 2a01:4f8:c0c:3bfc::2\tAdGuard에 추가 DNS-over-TLS, IPv4\tHostname: tls://dns.bitgeek.in IP: 139.59.51.46\tAdGuard에 추가 DNS-over-TLS\tHostname tls://dns.neutopia.org IP: 89.234.186.112 and IPv6: 2a00:5884:8209::2\tAdGuard에 추가 DNS-over-TLS\tProvider: Go6Lab Hostname tls://privacydns.go6lab.si IPv6: 2001:67c:27e4::35\tAdGuard에 추가 DNS-over-TLS\tHostname: tls://dot.securedns.eu IP: 146.185.167.43 and IPv6: 2a03:b0c0:0:1010::e9a:3001\tAdGuard에 추가 DNS servers with minimal logging/limitations. These servers use some logging, self-signed certs or no support for strict mode. 프로토콜\t주소\tDNS-over-TLS\tProvider: NIC Chile Hostname dnsotls.lab.nic.cl IP: 200.1.123.46 and IPv6: 2001:1398:1:0:200:1:123:46\tAdGuard에 추가 DNS-over-TLS\tProvider: OARC Hostname tls-dns-u.odvr.dns-oarc.net IP: 184.105.193.78 and IPv6: 2620:ff:c000:0:1::64:25\tAdGuard에 추가 "},{"title":"AhaDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#ahadns","content":"AhaDNS A zero-logging and ad-blocking DNS service provided by Fredrik Pettersson. Blitz​ Configurable filtering worldwide DoH-only variant 프로토콜\t주소\tDNS-over-HTTPS, uncensored\thttps://blitz.ahadns.com\tAdGuard에 추가 DNS-over-HTTPS, OISD filter\thttps://blitz.ahadns.com/1:1\tAdGuard에 추가 DNS-over-HTTPS, OISD &amp; Energized porn filter\thttps://blitz.ahadns.com/1:1.12\tAdGuard에 추가 Netherlands​ 프로토콜\t주소\tDNS, IPv4\t5.2.75.75\tAdGuard에 추가 DNS, IPv6\t2a04:52c0:101:75::75\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.nl.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.nl.ahadns.net\tAdGuard에 추가 India​ 프로토콜\t주소\tDNS, IPv4\t45.79.120.233\tAdGuard에 추가 DNS, IPv6\t2400:8904:e001:43::43\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.in.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.in.ahadns.net\tAdGuard에 추가 Los Angeles​ 프로토콜\t주소\tDNS, IPv4\t45.67.219.208\tAdGuard에 추가 DNS, IPv6\t2a04:bdc7:100:70::70\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.la.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.la.ahadns.net\tAdGuard에 추가 New York​ 프로토콜\t주소\tDNS, IPv4\t185.213.26.187\tAdGuard에 추가 DNS, IPv6\t2a0d:5600:33:3::3\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.ny.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.ny.ahadns.net\tAdGuard에 추가 Poland​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.pl.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.pl.ahadns.net\tAdGuard에 추가 Italy​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.it.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.it.ahadns.net\tAdGuard에 추가 Spain​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.es.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.es.ahadns.net\tAdGuard에 추가 Norway​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.no.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.no.ahadns.net\tAdGuard에 추가 Chicago​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.chi.ahadns.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dot.chi.ahadns.net\tAdGuard에 추가 "},{"title":"Seby DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#seby-dns","content":"Seby DNS is a privacy focused DNS service provided by Sebastian Schmidt. No Logging, DNSSEC validation. DNS Server 1​ 프로토콜\t주소\tDNS, IPv4\t45.76.113.31\tAdGuard에 추가 DNSCrypt, IPv4\tProvider: 2.dnscrypt-cert.dns.seby.io IP: 45.76.113.31\tAdGuard에 추가 DNS-over-TLS\ttls://dot.seby.io\tAdGuard에 추가 "},{"title":"puntCAT DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#puntcat-dns","content":"puntCAT is physically located near Barcelona, Spain. puntCAT offers a public DNS service, free, secure, close and that respects your privacy. 프로토콜\t주소\tDNS, IPv4\t109.69.8.51\tAdGuard에 추가 DNS, IPv6\t2a00:1508:0:4::9\tAdGuard에 추가 "},{"title":"DNSlify DNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#dnslify-dns","content":"DNSlify DNS operate public DNS resolvers to speed up requests, increase redundancy. The service is provided by Peerix 기본 모드​ These servers provide DNS resolution without traffic filtering. 프로토콜\t주소\tDNS, IPv4\t185.235.81.1 and 185.235.81.2\tAdGuard에 추가 DNS, IPv6\t2a0d:4d00:81::1 and 2a0d:4d00:81::2\tAdGuard에 추가 DNS-over-HTTPS\thttps://doh.dnslify.com/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://doh.dnslify.com\tAdGuard에 추가 Safe​ Safe mode guard against infected, fraudulent or bot sites. 프로토콜\t주소\tDNS, IPv4\t185.235.81.3 and 185.235.81.4\tAdGuard에 추가 DNS, IPv6\t2a0d:4d00:81::3 and 2a0d:4d00:81::4\tAdGuard에 추가 Family​ Family mode offers protection by &quot;Safe&quot; resolvers and blocks adult sites. 프로토콜\t주소\tDNS, IPv4\t185.235.81.5 and 185.235.81.6\tAdGuard에 추가 DNS, IPv6\t2a0d:4d00:81::5 and 2a0d:4d00:81::6\tAdGuard에 추가 "},{"title":"NextDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#nextdns","content":"NextDNS provides publicly accessible non-filtering resolvers with no logging in addition to its freemium configurable filtering resolvers with optional logging. Ultra-low latency​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://dns.nextdns.io\tAdGuard에 추가 DNS-over-TLS\ttls://dns.nextdns.io\tAdGuard에 추가 Anycast​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://anycast.dns.nextdns.io\tAdGuard에 추가 DNS-over-TLS\ttls://anycast.dns.nextdns.io\tAdGuard에 추가 "},{"title":"RethinkDNS​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#rethinkdns","content":"RethinkDNS provides DNS-over-HTTPS service running as Cloudflare Worker and DNS-over-TLS service running as Fly.io Worker with configurable blocklists. Unfiltered​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://basic.rethinkdns.com/\tAdGuard에 추가 DNS-over-TLS\ttls://max.rethinkdns.com\tAdGuard에 추가 "},{"title":"ControlD​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#controld","content":"ControlD is public DNS service which provides ads,malware, and social media blocking. Block malware​ 프로토콜\t주소\tDNS, IPv4\t76.76.2.1\tAdGuard에 추가 DNS-over-HTTPS\thttps://freedns.controld.com/p1\tAdGuard에 추가 DNS-over-TLS\ttls://p1.freedns.controld.com\tAdGuard에 추가 Block malware + ads​ 프로토콜\t주소\tDNS, IPv4\t76.76.2.2\tAdGuard에 추가 DNS-over-HTTPS\thttps://freedns.controld.com/p2\tAdGuard에 추가 DNS-over-TLS\ttls://p2.freedns.controld.com\tAdGuard에 추가 Block malware + ads + social​ 프로토콜\t주소\tDNS, IPv4\t76.76.2.3\tAdGuard에 추가 DNS-over-HTTPS\thttps://freedns.controld.com/p3\tAdGuard에 추가 DNS-over-TLS\ttls://p3.freedns.controld.com\tAdGuard에 추가 "},{"title":"Mullvad​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#mullvad","content":"Mullvad provides publicly accessible DNS with QNAME minimization, endpoints located in Australia, Germany, Singapore, Sweden, United Kingdom and United States (New York and Los Angeles). 필터링 하지 않음​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://doh.mullvad.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://doh.mullvad.net\tAdGuard에 추가 Ad blocking​ 프로토콜\t주소\tDNS-over-HTTPS\thttps://adblock.doh.mullvad.net/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://adblock.doh.mullvad.net\tAdGuard에 추가 "},{"title":"Small personal resolvers​","type":1,"pageTitle":"알려진 DNS 공급자","url":"general/dns-providers/#small-personal-resolvers","content":"In this section we list small, mostly personal DNS resolvers. They often have only one or very few servers and worse uptime than 'big' providers. We won't be able to proper monitor their availability. Use them at your own risk! Arapurayil​ Arapurayil is a personal DNS service hosted in Mumbai, India. Non-logging | Filters ads, trackers, phishing,etc | DNSSEC | QNAME Minimization | No EDNS Client-Subnet. 프로토콜\t주소\tDNSCrypt, IPv4\tHost: 2.dnscrypt-cert.dns.arapurayil.com IP: 3.7.156.128\tAdGuard에 추가 DNS-over-HTTPS\tHost: https://dns.arapurayil.com/dns-query\tAdGuard에 추가 Dandelion Sprout's Official DNS Server​ Dandelion Sprout's Official DNS Server is a personal DNS service hosted in Trondheim, Norway, using an AdGuard Home infrastructure. Blocks more ads and malware than AdGuard DNS thanks to more advanced syntax, but goes easier on trackers, and blocks alt-right tabloids and most imageboards. Logging is used to improve its used filterlists (e.g. by unblocking sites that shouldn't have been blocked), and to determine the least bad times for server system updates. 프로토콜\t주소\tDNS-over-HTTPS\thttps://dandelionsprout.asuscomm.com:2501/dns-query\tAdGuard에 추가 DNS-over-TLS\ttls://dandelionsprout.asuscomm.com:853\tAdGuard에 추가 DNS-over-QUIC\tquic://dandelionsprout.asuscomm.com:48582\tAdGuard에 추가 DNS, IPv4\tVaries; see link above. DNS, IPv6\tVaries; see link above. DNSCrypt, IPv4\tVaries; see link above.\t "},{"title":"How to flush DNS cache","type":0,"sectionRef":"#","url":"public-dns/solving-problems/how-to-flush-dns-cache/","content":"","keywords":""},{"title":"DNS 캐시란 무엇입니까?​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#dns-캐시란-무엇입니까","content":"DNS 캐시는 방문 사이트의 IP 주소를 로컬 컴퓨터에 저장하여 다음에 접속할 때, 더 빨리 로드할 수 있도록 합니다. 긴 DNS 조회를 수행하는 대신 시스템은 임시 DNS 캐시의 DNS 레코드를 사용하여 쿼리에 응답합니다. DNS 캐시에는 다음과 같은 이른바 리소스 레코드(RRs)가 포함되어 있습니다. 리소스 데이터(또는 rdata);레코드 유형;레코드 이름;TTL(수명);Class;리소스 데이터 길이 "},{"title":"캐시를 지워야 하는 경우​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#캐시를-지워야-하는-경우","content":"정기적으로 404 오류가 발생될 때. 예를 들어, 웹사이트가 다른 서버로 이전되고 해당 IP 주소가 변경되었을 때. 브라우저가 새 IP 주소에서 웹 사이트를 열도록 하려면 DNS 캐시에서 캐시된 IP를 제거해야 합니다. 개인 정보를 안전하게 개선하고 싶을 때 당신은 해커의 공격과 바이러스로부터 안전하기를 원할 것입니다. DNS 캐시가 손상되면 브라우저가 공격자가 컴퓨터의 DNS 레코드에 삽입한 악성 웹사이트의 IP 주소로 리디렉션 할 수 있습니다. "},{"title":"다른 OS에서 DNS 캐시를 삭제하는 방법​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#다른-os에서-dns-캐시를-삭제하는-방법","content":""},{"title":"macOS​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#macos","content":"macOS에서 DNS 캐시를 지우려면 터미널을 열고 (스포트라이트 검색을 사용하여 찾을 수 있습니다. 명령 + 스페이스 바를 누르고 터미널 입력하십시오) 다음 명령을 입력하십시오. sudo killall -HUP mDNSResponder macOS Big Sur 11.2.0 및 macOS Monterey 12.0.0에서는 다음 명령을 사용할 수도 있습니다. sudo dscacheutil -flushcache 그런 다음 관리자 암호를 입력하여 프로세스를 완료하십시오. "},{"title":"Windows​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#windows","content":"Windows 장치에서 DNS 캐시를 삭제하려면 다음을 수행하십시오. 명령 프롬프트를 관리자 권한으로 실행합니다. 시작 메뉴에서 명령 프롬프트 또는 cmd를 입력하여 찾을 수 있습니다. 그런 다음 ipconfig/flushdns 를 입력하고 Enter 키를 누릅니다. DNS 클라이언트 캐시가 성공적으로 삭제되었습니다. 라는 줄이 표시됩니다. 끝! "},{"title":"Linux​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#linux","content":"Linux에는 OS에서 Systemd Resolved, DNSMasq, BIND 또는 Nscd와 같은 캐싱 서비스가 설치되어 실행되지 않는 한 DNS 캐싱이 없습니다. DNS 캐시를 지우는 프로세스는 Linux 배포와 사용된 cache 서비스에 따라 다릅니다. 각 배포판에서 터미널 창을 실행해야 합니다. 키보드에서 Ctrl+Alt+T를 누르고 해당 명령을 사용하여 Linux 시스템이 실행 중인 서비스의 DNS 캐시를 삭제합니다. 사용 중인 DNS 클라이언트를 찾으려면 sudo lsof -i :53 -S명령을 실행합니다. Systemd Resolved​ To clear the Systemd Resolved DNS cache, type: sudo systemd-resolve --flush-caches On success, the command doesn’t return any message. DNSMasq​ To clear the DNSMasq cache, you need to restart it: sudo service dnsmasq restart Nscd​ To clear the Nscd cache, you also need to restart the service: sudo service nscd restart BIND​ To flush the BIND DNS cache, run the command: rndc flush Then you will need to reload BIND: rndc reload You will get the message that the server has been successfully reloaded. "},{"title":"Android​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#android","content":"The easiest way to clear your DNS cache on your Android device is to turn the Airplane mode on and off. You can enable/disable the Airplane Mode in the Quick Settings pane. A hard reboot can also help flush the DNS cache for your device. In order to do that, press and hold the power button for at least 20 seconds. It will (usually) force your device to reboot manually and the DNS cache will be cleared. Another option is to reset the network settings of your device in the Settings app. Open Settings &gt; System &gt; Advanced &gt; Reset options &gt; Reset network settings and tap Reset Settings to confirm. Note: by doing that, you will lose connections to Wi-Fi routers and other specific network settings, including DNS servers customizations. You will need to reset them manually. "},{"title":"iOS​","type":1,"pageTitle":"How to flush DNS cache","url":"public-dns/solving-problems/how-to-flush-dns-cache/#ios","content":"There are different ways to clear the DNS cache on your iPad or iPhone. The simplest way is to activate the Airplane mode (for example, in the Control Center or in the Settings app) and to deactivate it again. The DNS cache will be flushed. Another option is to reset the network settings of your device in the Settings app. Open General, scroll down, find Reset and tap on Reset Network Settings. Note: by doing that, you will lose connections to Wi-Fi routers and other specific network settings, including DNS servers customizations. You will need to reset them manually. "}]